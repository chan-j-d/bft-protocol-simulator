package simulation.event;

import simulation.network.entity.BFTMessage;
import simulation.network.entity.Validator;

import java.util.List;

import static simulation.event.EventUtil.convertPayloadsToQueueEvents;

/**
 * Represents a timed notification event for the given {@code node}.
 *
 * This class is mostly used for nodes to implement timeout mechanisms.
 *
 * @param <T> Message class carried by payloads generated by the type of protocol being simulated.
 */
public class TimedEvent<T extends BFTMessage> extends NodeEvent<T> {

    private final Validator<T> node;
    private final int id;

    public TimedEvent(double time, Validator<T> node, int id) {
        super(time, node);
        this.node = node;
        this.id = id;
    }

    @Override
    public List<NodeEvent<T>> simulate() {
        return convertPayloadsToQueueEvents(getTime(), node, node.notifyTime(id));
    }

    @Override
    public String toString() {
        return super.toString() + " (Timed): Notifying " + node + " at " + getTime();
    }
}
