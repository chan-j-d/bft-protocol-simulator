package simulation.event;

import simulation.network.entity.Node;

import java.util.List;

/**
 * Completes the processing of the given {@code payload} at {@code node}.
 * This should be preceded by a ProcessingDelayEvent.
 * The purpose of this is to update the time of the node and set it to idle.
 *
 * @param <T> Message class carried by payloads generated by the type of protocol being simulated.
 */
public class ProcessedPayloadEvent<T> extends NodeEvent<T> {

    public ProcessedPayloadEvent(double time, Node<T> node) {
        super(time, node);
    }

    @Override
    public List<NodeEvent<T>> simulate() {
        Node<T> node = getNode();
        node.setIdle(getTime());
        if (!node.isEmpty()) {
            return List.of(new ProcessingDelayEvent<>(getTime(), node, node.popFromQueue()));
        } else {
            return List.of();
        }
    }

    @Override
    public String toString() {
        return String.format("%s (ProcessedPayload): Payload processed at %s",
                super.toString(), getNode());
    }
}
